import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.6.20'
  id 'org.jetbrains.dokka' version '1.6.10'
  id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
  id 'com.vanniktech.maven.publish' version '0.18.0'
  id 'com.gradle.plugin-publish' version '0.21.0'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
}

repositories {
  gradlePluginPortal()
  google()
  mavenCentral()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // For Spoon snapshot, until 2.0.0 is released
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations.all {
  resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
    }
  }
}

dependencies {
  implementation deps.kotlin.stdlib.jdk
  implementation deps.spoon.runner
  implementation deps.android.tools.build.gradle
  implementation deps.android.tools.ddmlib

  testImplementation deps.junit
  testImplementation localGroovy()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
}

gradlePlugin {
  plugins {
    spoonPlugin {
      id = PLUGIN_NAME
      implementationClass = PLUGIN_NAME_CLASS
    }
  }
}

tasks.withType(Jar).configureEach {
  def dateFile = new File(buildDir, 'jar-manifest-date.txt')
  if (!dateFile.exists()) {
    def date = DateTimeFormatter.ofPattern('EEE MMM dd HH:mm:ss zzz yyyy').
      format(ZonedDateTime.now())
    dateFile.parentFile.mkdirs()
    dateFile.text = date.trim()
  }

  manifest {
    attributes(
      'Created-By': POM_DEVELOPER_NAME,
      'Implementation-Title': POM_NAME,
      'Implementation-Version': VERSION_NAME,
      'Implementation-Vendor': POM_DEVELOPER_NAME,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': dateFile.text.trim(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
  }
}

tasks.withType(GroovyCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
  }
}

tasks.withType(Test).configureEach {
  testLogging {
    exceptionFormat 'full'
    showCauses true
    showExceptions true
    showStackTraces true
    events 'failed', 'skipped'
  }
}
