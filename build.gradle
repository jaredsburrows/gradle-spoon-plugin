plugins {
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'com.gradle.plugin-publish' version '0.10.1'
  id 'org.jetbrains.kotlin.jvm' version '1.3.50'
  id 'org.jetbrains.dokka' version '0.10.0'
  id 'org.jlleitschuh.gradle.ktlint' version '9.0.0'
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
  id 'maven-publish'
  id 'signing'
}

repositories {
  gradlePluginPortal()
  google()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // For Spoon snapshot, until 2.0.0 is released
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = versions.java
targetCompatibility = versions.java

jar {
  manifest {
    attributes(
      'Implementation-Title': POM_NAME,
      'Implementation-Version': version,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': new Date(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

configurations.all {
  resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
    }
  }
}

dependencies {
  implementation deps.kotlin.stdlib.jdk
  implementation deps.spoon.runner
  implementation deps.android.tools.build.gradle
  implementation deps.android.tools.ddmlib

  testImplementation localGroovy()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
}

apply from: 'gradle/publish.gradle'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
  kotlinOptions {
    jvmTarget = rootProject.versions.java
    allWarningsAsErrors = true
  }
}

tasks.withType(JavaCompile) {
  sourceCompatibility = rootProject.versions.java
  targetCompatibility = rootProject.versions.java

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    compilerArgs << '-Werror'
    encoding = 'utf-8'
  }
}

tasks.withType(Test) {
  // Turn on logging for all tests, filter to show failures/skips only
  testLogging {
    exceptionFormat 'full'
    showCauses true
    showExceptions true
    showStackTraces true
    events 'failed', 'skipped'
  }
}

tasks.withType(Javadoc) {
  title = "${project.name} ${project.version}"
  configure(options) {
    header = project.name
    encoding 'UTF-8'
    docEncoding 'UTF-8'
    charSet 'UTF-8'
    linkSource true
    author = true
    links('http://docs.oracle.com/javase/8/docs/api/',
      'http://docs.oracle.com/javaee/7/api/')
    exclude "**/*Test.java"
    if (JavaVersion.current().java8Compatible) addStringOption('Xdoclint:none', '-quiet')
  }
}
