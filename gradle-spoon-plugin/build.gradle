plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.9.23'
  id 'org.jetbrains.dokka' version '1.9.20'
  id 'org.jlleitschuh.gradle.ktlint' version '11.6.1'
  id 'com.vanniktech.maven.publish' version '0.25.3'
  id 'com.gradle.plugin-publish' version '0.21.0'
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
}

apply from: "${project.rootDir}/gradle/dependencies.gradle"

task createClasspathManifest() {
  def outputDir = new File(buildDir, name)

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    // Combine both main and test plugin classpaths
    def set = new HashSet<String>()
    sourceSets.main.runtimeClasspath.files.forEach {
      set.add(it.path)
    }
    sourceSets.test.runtimeClasspath.files.forEach {
      set.add(it.path)
    }
    def list = new ArrayList<String>(set)
    file("$outputDir/plugin-classpath.txt").text = String.join("\n", list)
  }
}

dependencies {
  compileOnly gradleApi()

  implementation deps.kotlin.stdlib.jdk
  implementation deps.spoon.runner
  implementation deps.android.tools.build.gradle
  implementation deps.android.tools.ddmlib

  testRuntimeOnly files(createClasspathManifest)

  testImplementation localGroovy()
  testImplementation gradleTestKit()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
  testImplementation deps.junit
}

pluginBundle {
  website = POM_URL
  vcsUrl = POM_SCM_URL
  description = POM_DESCRIPTION
  tags = ['spoon']

  plugins {
    spoonPlugin {
      displayName = POM_NAME
    }
  }
}
gradlePlugin {
  plugins {
    spoonPlugin {
      id = PLUGIN_NAME
      implementationClass = PLUGIN_NAME_CLASS
    }
  }
}
