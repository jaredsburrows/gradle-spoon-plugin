buildscript {
  apply from: rootProject.file('../gradle/dependencies.gradle')

  repositories {
    mavenLocal()
    google()
    mavenCentral()
    // For Spoon snapshot, until 2.0.0 is released
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    gradlePluginPortal()
  }

  dependencies {
    classpath deps.android.tools.build.gradle
    classpath deps.kotlin.gradle.plugin
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.42.0'
    classpath 'com.jaredsburrows:gradle-spoon-plugin:latest.integration'
  }
}

repositories {
  google()
  mavenCentral()
  // For Spoon snapshot, until 2.0.0 is released
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  gradlePluginPortal()
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.jaredsburrows.spoon'
apply plugin: 'com.github.ben-manes.versions'

android {
  compileSdkVersion 32

  defaultConfig {
    applicationId 'com.jaredsburrows.spoon.example'
    minSdkVersion 21
    targetSdkVersion 32
    versionCode 1
    versionName '1.0'

    testApplicationId 'com.jaredsburrows.spoon.example.test'
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  buildTypes {
    debug {
      testCoverageEnabled = true
    }
  }
}

configurations.all {
  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
      if (details.requested.group == 'org.jacoco') {
        details.useVersion versions.jacoco
      }
    }
  }
}

spoon {
  debug = true

  baseOutputDir = file("$buildDir/custom-report-dir")

  if (project.hasProperty('spoonClassName')) {
    className = project.spoonClassName

    if (project.hasProperty('spoonMethodName')) {
      methodName = project.spoonMethodName
    }
  }

  instrumentationArgs = ['disableAnalytics:true']

  adbTimeout = 30

  codeCoverage = true

  grantAllPermissions = true
}

dependencies {
  implementation deps.kotlin.stdlib.jdk

  androidTestImplementation deps.truth
  androidTestImplementation deps.junit
  androidTestImplementation deps.spoon.client
  androidTestImplementation deps.androidx.test.core
  androidTestImplementation deps.androidx.test.junit
  androidTestImplementation deps.androidx.test.runner
}

tasks.register("checkReports") {
 dependsOn(tasks.named("spoonDebugAndroidTest"))
 doLast {
    assert project.tasks.spoonDebugAndroidTest != null
    assert project.file("$buildDir/custom-report-dir").exists()
    assert project.file("$buildDir/custom-report-dir/debug").exists()
    assert project.file("$buildDir/custom-report-dir/debug/coverage").exists()
  }
}
